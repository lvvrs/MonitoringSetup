---
- name: Check service_status
  service_facts:
  register: service_state

- name: Print_status_node_exporter.service
  debug:
    var: service_state.ansible_facts.services["node_exporter.service"].state

- name: Run_node_exporter.service_when_service_is_stopped
  systemd:
    name: "{{ node_exporter.app_name }}"
    state: started
    enabled: yes
  become: yes
  when: service_state.ansible_facts.services["node_exporter.service"].state == 'stopped'

- name: Check_run_node_exporter.service
  service_facts:
  register: status_run_node_exporter

- name: Print status run node_exporter.service
  debug:
    var: status_run_node_exporter.ansible_facts.services["node_exporter.service"].state

- name: Check_services_on_hosts_moniotor
  block:

    - name: Print_status_prometheus.service
      debug:
        var: service_state.ansible_facts.services["prometheus.service"].state

    - name: Run_prometheus.service_when_service_is_stopped
      systemd:
        name: "{{ prometheus.app_name }}"
        state: started
        enabled: yes
      become: yes
      when: service_state.ansible_facts.services["prometheus.service"].state == 'stopped'

    - name: Check_run_prometheus.service
      service_facts:
      register: status_run_prometheus_service

    - name: Print status run prometheus.service
      debug:
        var: status_run_prometheus_service.ansible_facts.services["prometheus.service"].state

    - name: Print_status_grafana-server.service
      debug:
        var: service_state.ansible_facts.services["grafana-server.service"].state

    - name: Run_grafana-server.service_when_service_is_stopped
      systemd:
        name: "{{ grafana.app_name }}"
        state: started
        enabled: yes
      become: yes
      when: service_state.ansible_facts.services["grafana-server.service"].state == 'stopped'

    - name: Check_run_grafana-server.service
      service_facts:
      register: status_run_grafana_service

    - name: Print status run grafana-server.service
      debug:
        var: status_run_grafana_service.ansible_facts.services["grafana-server.service"].state

    - name: Print_status_alertmanager.service
      debug:
        var: service_state.ansible_facts.services["alertmanager.service"].state

    - name: Run_alertmanager.service_when_service_is_stopped
      systemd:
        name: "{{ alertmanager.app_name }}"
        state: started
        enabled: yes
      become: yes
      when: service_state.ansible_facts.services["alertmanager.service"].state == 'stopped'

    - name: Check_run_alertmanager.service
      service_facts:
      register: status_run_alertmanager_service

    - name: Print status run alertmanager.service
      debug:
        var: status_run_alertmanager_service.ansible_facts.services["alertmanager.service"].state

  when: inventory_hostname in groups['monitor_servers']|default([])

- name: Check_services_on_hosts_storage
  block:

    - name: Print_status_victoria_metrics.service
      debug:
        var: service_state.ansible_facts.services["victoria_metrics.service"].state

    - name: Run_victoria_metrics.service_when_service_is_stopped
      systemd:
        name: "{{ victoria_metrics.app_name }}"
        state: started
        enabled: yes
      become: yes
      when: service_state.ansible_facts.services["victoria_metrics.service"].state == 'stopped'

    - name: Wait_when_Victoria_metrics_will_be_ready
      pause:
        seconds: 45

    - name: Check_run_victoria_metrics.service
      service_facts:
      register: status_run_victoria_metrics_service

    - name: Print status run victoria_metrics.service
      debug:
        var: status_run_victoria_metrics_service.ansible_facts.services["victoria_metrics.service"].state

  when: inventory_hostname in groups['storage_servers']|default([])
